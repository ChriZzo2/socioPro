import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { handleStart } from './handlers/startHandler.js';
import { handleAbout } from './handlers/aboutHandler.js';
import { handleArticles } from './handlers/articlesHandler.js';
import { handleContact } from './handlers/contactHandler.js';
import logger from './utils/logger.js';

dotenv.config();

const token = process.env.BOT_TOKEN;

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const bot = new TelegramBot(token, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
let isShuttingDown = false;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
  if (isShuttingDown) return;

  logger.error('Polling error:', error);

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  if (error.code === 'ETELEGRAM' && error.response.statusCode === 409) {
    logger.info('Restarting polling due to conflict...');
    bot.stopPolling()
        .then(() => bot.startPolling())
        .catch(err => logger.error('Error restarting polling:', err));
  }
});

// Graceful shutdown
function shutdown() {
  isShuttingDown = true;
  logger.info('Shutting down bot...');

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
  bot.stopPolling()
      .then(() => {
        logger.info('Bot stopped successfully');
        process.exit(0);
      })
      .catch(error => {
        logger.error('Error stopping bot:', error);
        process.exit(1);
      });

  // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  setTimeout(() => {
    logger.error('Forced shutdown after timeout');
    process.exit(1);
  }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  shutdown();
});

process.on('unhandledRejection', (error) => {
  logger.error('Unhandled Rejection:', error);
  shutdown();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
logger.info('Bot started successfully');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  try {
    handleStart(bot, msg);
    logger.info(`Start command from user ${msg.from.id}`);
  } catch (error) {
    logger.error('Error in start handler:', error);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.on('message', (msg) => {
  try {
    const chatId = msg.chat.id;

    switch (msg.text) {
      case '‚ÑπÔ∏è –û–±–æ –º–Ω–µ':
        handleAbout(bot, chatId);
        logger.info(`About section requested by user ${msg.from.id}`);
        break;
      case 'üìö –°—Ç–∞—Ç—å–∏':
        handleArticles(bot, chatId);
        logger.info(`Articles section requested by user ${msg.from.id}`);
        break;
      case 'üìû –°–≤—è–∑–∞—Ç—å—Å—è':
        handleContact(bot, chatId);
        logger.info(`Contact section requested by user ${msg.from.id}`);
        break;
    }
  } catch (error) {
    logger.error('Error in message handler:', error);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});